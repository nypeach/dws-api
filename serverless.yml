# NOTE: update this with your service name
service: dws-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: dws

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  create:
    # Defines an HTTP API endpoint that calls the main function in create.js
    handler: lambda-triggers/db-functions/create.main
    events:
      - http:
          path: dws
          cors: true
          method: post
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    handler: lambda-triggers/db-functions/get.main
    events:
      - http:
          path: dws/{id}
          cors: true
          method: get
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    handler: lambda-triggers/db-functions/list.main
    events:
      - http:
          path: dws
          cors: true
          method: get
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    handler: lambda-triggers/db-functions/update.main
    events:
      - http:
          path: dws/{id}
          cors: true
          method: put
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    handler: lambda-triggers/db-functions/delete.main
    events:
      - http:
          path: dws/{id}
          cors: true
          method: delete
          authorizer: aws_iam

